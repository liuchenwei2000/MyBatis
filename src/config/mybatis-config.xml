<?xml version="1.0" encoding="utf-8"?>
<!-- 
本配置文件中包含了对 MyBatis 系统的核心设置：
包含获取数据库连接实例的数据源（Data Source）、决定事务范围和控制方式的事务管理器（Transaction Manager）及 Mapper XML 配置文件。
-->
<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-config.dtd">

<configuration>

	<!--  
	properties 元素被用来配置属性信息，这些属性都是可外部配置且可动态替换的，
	既可以在典型的 Java 属性文件中配置，亦可通过 properties 元素的子元素来传递。
	
	在下面的配置中，将数据库连接属性具体化到 application.properties 文件中，
	并且 dataSource 的 driver，url 等属性使用属性文件中的 key 作为占位符。
	-->
	<properties resource="config/application.properties">
		<!--  
		可以为 <properties> 元素配置默认参数的值。
		如果 <properties> 中定义的元素和属性文件定义元素的 key 相同，它们会被属性文件中定义的值覆盖。
		下面 dataSource 的 username，password 属性实际上使用的是这里定义的属性值。
		-->
		<property name="username" value="db_user" />
		<property name="password" value="verysecurepwd" />
	</properties>
	
	<!--  
	为满足应用特定的需求，MyBatis 默认的全局参数设置可以被覆盖掉，使用 settings 元素即可。
	-->
	<settings>
		<setting name="cacheEnabled" value="true" />
	</settings>
	
	<!--  
	typeAliases 元素可以为完全限定类名取一个别名（alias），然后在需要使用完全限定名的地方使用别名。
	在 SQLMapper 配置文件中，对于 resultType 和 parameterType 属性值，通常需要使用 JavaBean 的完全限定名。
	通过使用别名可以大幅减少工作量。
	-->
	<typeAliases>
		<typeAlias alias="contact" type="config.Contact" />
		<!--  
		也不必为每一个 JavaBean 单独定义别名，可以提供需要取别名的 JavaBean 所在的包名(package)，
		MyBatis 会自动扫描包内定义的 JavaBeans，然后分别为 每个JavaBean 注册一个小写字母开头的类名形式的别名。
		-->
		<package name="config" />
	</typeAliases>
	
	<!-- typeHandlers 元素用来注册自定义的类型处理器，详见 自定义类型处理器.txt -->
	<typeHandlers>
		<typeHandler handler="config.PhoneTypeHandler" />
	</typeHandlers>
	
	<!--  
	MyBatis 支持配置多个 dataSource 环境，可以将应用部署到不同的数据库环境上，如 
	DEV(开发环境)， TEST （测试环境），PRODUCTION（生产环境）……
	可以通过将 environments 的 default 值设置成需要的 environment id 值。
	-->
	<environments default="development">
	
		<!-- 开发环境 -->
		<environment id="development">
		
			<!--  
			transactionManager 元素被用来配置事务管理器，其类型可以配置为：
			JDBC：用在当应用程序负责管理数据库连接的生命周期（提交、回滚等）的时候。
				  MyBatis 内部将使用 JdbcTransactionFactory 类创建 TransactionManager，需要应用程序自己管理事务。
			MANAGED：用在当由应用服务器负责管理数据库连接生命周期（提交、回滚等）的时候。
					 MyBatis 内部使用  ManagedTransactionFactory 类创建事务管理器 TransactionManager。
					 例如，当一个 JavaEE 的应用程序部署在类似 JBoss， WebLogic，GlassFish 应用服务器上时，
					 它们会使用 EJB 进行事务管理。在这些环境中，可以使用 MANAGED 类型事务管理器。
			-->
			<transactionManager type="JDBC" />
			
			<!-- 
			dataSource 元素被用来配置数据库连接属性，其类型可以配置为：
			UNPOOLED：会为每一个数据库操作创建一个新的连接，并真正关闭它。该方式适用于只有小规模数量并发用户的简单应用程序上。
			POOLED：会创建一个数据库连接池，连接池中的一个连接将会被用作数据库操作。
					一旦数据库操作完成，MyBatis 会将此连接返回给连接池。在开发或测试环境中，经常使用此种方式。
			JNDI：会从在应用服务器配置好的 JNDI 数据源 dataSource 获取数据库连接。在生产环境中，优先考虑这种方式。
			-->
			<dataSource type="POOLED">
				<property name="driver" value="${jdbc.driverClassName}" />
				<property name="url" value="${jdbc.url}" />
				<property name="username" value="${username}" />
				<property name="password" value="${password}" />
			</dataSource>
			
		</environment>
		
		<!-- 生产环境 -->
		<environment id="production">
			<transactionManager type="MANAGED" />
			<dataSource type="JNDI">
				<property name="data_source" value="java:comp/jdbc/MyBatisDemoDS" />
			</dataSource>
		</environment>
		
	</environments>
	
	<!-- 注册 SQL Mapper 文件 -->
	<mappers>
		<!-- resource 属性用来指定在 classpath 中的 mapper 文件 -->
		<mapper resource="com/mybatis3/mappers/ContactMapper.xml" />
		<!-- url 属性用来通过文件全路径或者 Web URL 地址来指向 mapper 文件 -->
		<mapper url="file:///D:/mybatisdemo/mappers/ContactMapper.xml" />
		<!-- class 属性用来指向一个 mapper 接口 -->
		<mapper class="config.ContactMapper" />
	</mappers>
	
</configuration>